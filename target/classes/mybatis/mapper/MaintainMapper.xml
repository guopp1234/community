<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.community.mapper.MaintainMapper">
    <resultMap id="BaseResultMap" type="cn.community.pojo.Maintain">
        <id column="maintain_id" jdbcType="VARCHAR" property="maintainId"/>
        <result column="owner_Id" jdbcType="INTEGER" property="ownerId"/>
        <result column="staff_id" jdbcType="INTEGER" property="staffId"/>
        <result column="maintain_charge" jdbcType="DOUBLE" property="maintainCharge"/>
        <result column="picture" jdbcType="VARCHAR" property="picture"/>
    </resultMap>
    <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="cn.community.pojo.Maintain">
        <result column="maintain_info" jdbcType="LONGVARCHAR" property="maintainInfo"/>
        <result column="feedback" jdbcType="LONGVARCHAR" property="feedback"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    maintain_id, owner_Id, staff_id, maintain_charge, picture
  </sql>
    <sql id="Blob_Column_List">
    maintain_info, feedback
  </sql>
    <select id="selectByExampleWithBLOBs" parameterType="cn.community.pojo.MaintainExample"
            resultMap="ResultMapWithBLOBs">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from maintain
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByExample" parameterType="cn.community.pojo.MaintainExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from maintain
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from maintain
        where maintain_id = #{maintainId,jdbcType=VARCHAR}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from maintain
    where maintain_id = #{maintainId,jdbcType=VARCHAR}
  </delete>
    <delete id="deleteByExample" parameterType="cn.community.pojo.MaintainExample">
        delete from maintain
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="cn.community.pojo.Maintain">
    insert into maintain (maintain_id, owner_Id, staff_id, 
      maintain_charge, picture, maintain_info, 
      feedback)
    values (#{maintainId,jdbcType=VARCHAR}, #{ownerId,jdbcType=INTEGER}, #{staffId,jdbcType=INTEGER}, 
      #{maintainCharge,jdbcType=DOUBLE}, #{picture,jdbcType=VARCHAR}, #{maintainInfo,jdbcType=LONGVARCHAR}, 
      #{feedback,jdbcType=LONGVARCHAR})
  </insert>
    <insert id="insertSelective" parameterType="cn.community.pojo.Maintain">
        insert into maintain
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="maintainId != null">
                maintain_id,
            </if>
            <if test="ownerId != null">
                owner_Id,
            </if>
            <if test="staffId != null">
                staff_id,
            </if>
            <if test="maintainCharge != null">
                maintain_charge,
            </if>
            <if test="picture != null">
                picture,
            </if>
            <if test="maintainInfo != null">
                maintain_info,
            </if>
            <if test="feedback != null">
                feedback,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="maintainId != null">
                #{maintainId,jdbcType=VARCHAR},
            </if>
            <if test="ownerId != null">
                #{ownerId,jdbcType=INTEGER},
            </if>
            <if test="staffId != null">
                #{staffId,jdbcType=INTEGER},
            </if>
            <if test="maintainCharge != null">
                #{maintainCharge,jdbcType=DOUBLE},
            </if>
            <if test="picture != null">
                #{picture,jdbcType=VARCHAR},
            </if>
            <if test="maintainInfo != null">
                #{maintainInfo,jdbcType=LONGVARCHAR},
            </if>
            <if test="feedback != null">
                #{feedback,jdbcType=LONGVARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="cn.community.pojo.MaintainExample" resultType="java.lang.Long">
        select count(*) from maintain
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update maintain
        <set>
            <if test="record.maintainId != null">
                maintain_id = #{record.maintainId,jdbcType=VARCHAR},
            </if>
            <if test="record.ownerId != null">
                owner_Id = #{record.ownerId,jdbcType=INTEGER},
            </if>
            <if test="record.staffId != null">
                staff_id = #{record.staffId,jdbcType=INTEGER},
            </if>
            <if test="record.maintainCharge != null">
                maintain_charge = #{record.maintainCharge,jdbcType=DOUBLE},
            </if>
            <if test="record.picture != null">
                picture = #{record.picture,jdbcType=VARCHAR},
            </if>
            <if test="record.maintainInfo != null">
                maintain_info = #{record.maintainInfo,jdbcType=LONGVARCHAR},
            </if>
            <if test="record.feedback != null">
                feedback = #{record.feedback,jdbcType=LONGVARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExampleWithBLOBs" parameterType="map">
        update maintain
        set maintain_id = #{record.maintainId,jdbcType=VARCHAR},
        owner_Id = #{record.ownerId,jdbcType=INTEGER},
        staff_id = #{record.staffId,jdbcType=INTEGER},
        maintain_charge = #{record.maintainCharge,jdbcType=DOUBLE},
        picture = #{record.picture,jdbcType=VARCHAR},
        maintain_info = #{record.maintainInfo,jdbcType=LONGVARCHAR},
        feedback = #{record.feedback,jdbcType=LONGVARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update maintain
        set maintain_id = #{record.maintainId,jdbcType=VARCHAR},
        owner_Id = #{record.ownerId,jdbcType=INTEGER},
        staff_id = #{record.staffId,jdbcType=INTEGER},
        maintain_charge = #{record.maintainCharge,jdbcType=DOUBLE},
        picture = #{record.picture,jdbcType=VARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="cn.community.pojo.Maintain">
        update maintain
        <set>
            <if test="ownerId != null">
                owner_Id = #{ownerId,jdbcType=INTEGER},
            </if>
            <if test="staffId != null">
                staff_id = #{staffId,jdbcType=INTEGER},
            </if>
            <if test="maintainCharge != null">
                maintain_charge = #{maintainCharge,jdbcType=DOUBLE},
            </if>
            <if test="picture != null">
                picture = #{picture,jdbcType=VARCHAR},
            </if>
            <if test="maintainInfo != null">
                maintain_info = #{maintainInfo,jdbcType=LONGVARCHAR},
            </if>
            <if test="feedback != null">
                feedback = #{feedback,jdbcType=LONGVARCHAR},
            </if>
        </set>
        where maintain_id = #{maintainId,jdbcType=VARCHAR}
    </update>
    <update id="updateByPrimaryKeyWithBLOBs" parameterType="cn.community.pojo.Maintain">
    update maintain
    set owner_Id = #{ownerId,jdbcType=INTEGER},
      staff_id = #{staffId,jdbcType=INTEGER},
      maintain_charge = #{maintainCharge,jdbcType=DOUBLE},
      picture = #{picture,jdbcType=VARCHAR},
      maintain_info = #{maintainInfo,jdbcType=LONGVARCHAR},
      feedback = #{feedback,jdbcType=LONGVARCHAR}
    where maintain_id = #{maintainId,jdbcType=VARCHAR}
  </update>
    <update id="updateByPrimaryKey" parameterType="cn.community.pojo.Maintain">
    update maintain
    set owner_Id = #{ownerId,jdbcType=INTEGER},
      staff_id = #{staffId,jdbcType=INTEGER},
      maintain_charge = #{maintainCharge,jdbcType=DOUBLE},
      picture = #{picture,jdbcType=VARCHAR}
    where maintain_id = #{maintainId,jdbcType=VARCHAR}
  </update>

    <update id="updateByMaintanId">
    UPDATE maintain SET maintain_info= #{maintainInfo} where maintain_id = #{maintainId}
    </update>
</mapper>