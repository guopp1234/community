<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.community.mapper.ComplaintMapper">
    <resultMap id="BaseResultMap" type="cn.community.pojo.Complaint">
        <id column="complaint_id" jdbcType="VARCHAR" property="complaintId"/>
        <result column="owner_id" jdbcType="INTEGER" property="ownerId"/>
        <result column="complaint_date" jdbcType="DATE" property="complaintDate"/>
    </resultMap>
    <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="cn.community.pojo.Complaint">
        <result column="complaint_comment" jdbcType="LONGVARCHAR" property="complaintComment"/>
        <result column="feedback" jdbcType="LONGVARCHAR" property="feedback"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    complaint_id, owner_id, complaint_date
  </sql>
    <sql id="Blob_Column_List">
    complaint_comment, feedback
  </sql>
    <select id="selectByExampleWithBLOBs" parameterType="cn.community.pojo.ComplaintExample"
            resultMap="ResultMapWithBLOBs">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from complaint
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByExample" parameterType="cn.community.pojo.ComplaintExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from complaint
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from complaint
        where complaint_id = #{complaintId,jdbcType=VARCHAR}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from complaint
    where complaint_id = #{complaintId,jdbcType=VARCHAR}
  </delete>
    <delete id="deleteByExample" parameterType="cn.community.pojo.ComplaintExample">
        delete from complaint
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="cn.community.pojo.Complaint">
    insert into complaint (complaint_id, owner_id, complaint_date, 
      complaint_comment, feedback)
    values (#{complaintId,jdbcType=VARCHAR}, #{ownerId,jdbcType=INTEGER}, #{complaintDate,jdbcType=DATE}, 
      #{complaintComment,jdbcType=LONGVARCHAR}, #{feedback,jdbcType=LONGVARCHAR})
  </insert>
    <insert id="insertSelective" parameterType="cn.community.pojo.Complaint">
        insert into complaint
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="complaintId != null">
                complaint_id,
            </if>
            <if test="ownerId != null">
                owner_id,
            </if>
            <if test="complaintDate != null">
                complaint_date,
            </if>
            <if test="complaintComment != null">
                complaint_comment,
            </if>
            <if test="feedback != null">
                feedback,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="complaintId != null">
                #{complaintId,jdbcType=VARCHAR},
            </if>
            <if test="ownerId != null">
                #{ownerId,jdbcType=INTEGER},
            </if>
            <if test="complaintDate != null">
                #{complaintDate,jdbcType=DATE},
            </if>
            <if test="complaintComment != null">
                #{complaintComment,jdbcType=LONGVARCHAR},
            </if>
            <if test="feedback != null">
                #{feedback,jdbcType=LONGVARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="cn.community.pojo.ComplaintExample" resultType="java.lang.Long">
        select count(*) from complaint
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update complaint
        <set>
            <if test="record.complaintId != null">
                complaint_id = #{record.complaintId,jdbcType=VARCHAR},
            </if>
            <if test="record.ownerId != null">
                owner_id = #{record.ownerId,jdbcType=INTEGER},
            </if>
            <if test="record.complaintDate != null">
                complaint_date = #{record.complaintDate,jdbcType=DATE},
            </if>
            <if test="record.complaintComment != null">
                complaint_comment = #{record.complaintComment,jdbcType=LONGVARCHAR},
            </if>
            <if test="record.feedback != null">
                feedback = #{record.feedback,jdbcType=LONGVARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExampleWithBLOBs" parameterType="map">
        update complaint
        set complaint_id = #{record.complaintId,jdbcType=VARCHAR},
        owner_id = #{record.ownerId,jdbcType=INTEGER},
        complaint_date = #{record.complaintDate,jdbcType=DATE},
        complaint_comment = #{record.complaintComment,jdbcType=LONGVARCHAR},
        feedback = #{record.feedback,jdbcType=LONGVARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update complaint
        set complaint_id = #{record.complaintId,jdbcType=VARCHAR},
        owner_id = #{record.ownerId,jdbcType=INTEGER},
        complaint_date = #{record.complaintDate,jdbcType=DATE}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="cn.community.pojo.Complaint">
        update complaint
        <set>
            <if test="ownerId != null">
                owner_id = #{ownerId,jdbcType=INTEGER},
            </if>
            <if test="complaintDate != null">
                complaint_date = #{complaintDate,jdbcType=DATE},
            </if>
            <if test="complaintComment != null">
                complaint_comment = #{complaintComment,jdbcType=LONGVARCHAR},
            </if>
            <if test="feedback != null">
                feedback = #{feedback,jdbcType=LONGVARCHAR},
            </if>
        </set>
        where complaint_id = #{complaintId,jdbcType=VARCHAR}
    </update>
    <update id="updateByPrimaryKeyWithBLOBs" parameterType="cn.community.pojo.Complaint">
    update complaint
    set owner_id = #{ownerId,jdbcType=INTEGER},
      complaint_date = #{complaintDate,jdbcType=DATE},
      complaint_comment = #{complaintComment,jdbcType=LONGVARCHAR},
      feedback = #{feedback,jdbcType=LONGVARCHAR}
    where complaint_id = #{complaintId,jdbcType=VARCHAR}
  </update>
    <update id="updateByPrimaryKey" parameterType="cn.community.pojo.Complaint">
    update complaint
    set owner_id = #{ownerId,jdbcType=INTEGER},
      complaint_date = #{complaintDate,jdbcType=DATE}
    where complaint_id = #{complaintId,jdbcType=VARCHAR}
  </update>

    <update id="updateByPriMaryKeyAndComment">
      UPDATE complaint set complaint_comment = #{complaintComment} WHERE complaint_id = #{complaintId}
    </update>
</mapper>